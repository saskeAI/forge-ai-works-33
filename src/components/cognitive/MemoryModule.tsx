
import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Database, Clock, Star, Trash2, Search, Archive } from 'lucide-react';

interface MemoryEntry {
  id: string;
  timestamp: string;
  type: 'interaction' | 'emotion' | 'learning' | 'decision';
  content: string;
  emotionalContext: string;
  importance: number;
  recalled: number;
}

export const MemoryModule: React.FC = () => {
  const [memories] = useState<MemoryEntry[]>([
    {
      id: '1',
      timestamp: '2025-05-20T14:30:00',
      type: 'interaction',
      content: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º',
      emotionalContext: '–í—ã—Å–æ–∫–∞—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥',
      importance: 0.9,
      recalled: 3
    },
    {
      id: '2',
      timestamp: '2025-05-20T12:15:00',
      type: 'emotion',
      content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∑–∏–ª –≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ SASOK',
      emotionalContext: '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –≥–æ—Ä–¥–æ—Å—Ç—å –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
      importance: 0.8,
      recalled: 2
    },
    {
      id: '3',
      timestamp: '2025-05-19T16:45:00',
      type: 'learning',
      content: '–£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
      emotionalContext: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, —Å–∞–º–æ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ',
      importance: 0.85,
      recalled: 5
    },
    {
      id: '4',
      timestamp: '2025-05-19T10:20:00',
      type: 'decision',
      content: '–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ–¥ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      emotionalContext: '–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —ç–º–ø–∞—Ç–∏–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—é',
      importance: 0.75,
      recalled: 1
    }
  ]);

  const [selectedType, setSelectedType] = useState<string>('all');
  const [storageStats] = useState({
    totalMemories: 1247,
    emotionalProfiles: 89,
    learningPatterns: 156,
    storageUsed: 67,
    compressionRatio: 0.34
  });

  const getTypeIcon = (type: string) => {
    const icons = {
      interaction: 'üí¨',
      emotion: '‚ù§Ô∏è',
      learning: 'üß†',
      decision: '‚ö°'
    };
    return icons[type as keyof typeof icons] || 'üìù';
  };

  const getTypeColor = (type: string) => {
    const colors = {
      interaction: 'bg-blue-100 text-blue-800',
      emotion: 'bg-red-100 text-red-800',
      learning: 'bg-green-100 text-green-800',
      decision: 'bg-purple-100 text-purple-800'
    };
    return colors[type as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  const filteredMemories = selectedType === 'all' 
    ? memories 
    : memories.filter(memory => memory.type === selectedType);

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Database className="text-green-600" size={24} />
          –ú–æ–¥—É–ª—å –ø–∞–º—è—Ç–∏ –∏ –æ–ø—ã—Ç–∞
        </CardTitle>
        <CardDescription>
          –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –æ–±—É—á–∞—é—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-600">{storageStats.totalMemories}</div>
            <div className="text-xs text-muted-foreground">–í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-red-600">{storageStats.emotionalProfiles}</div>
            <div className="text-xs text-muted-foreground">–≠–º–æ—Ü. –ø—Ä–æ—Ñ–∏–ª–µ–π</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-green-600">{storageStats.learningPatterns}</div>
            <div className="text-xs text-muted-foreground">–ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-purple-600">{storageStats.storageUsed}%</div>
            <div className="text-xs text-muted-foreground">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-orange-600">{Math.round(storageStats.compressionRatio * 100)}%</div>
            <div className="text-xs text-muted-foreground">–°–∂–∞—Ç–∏–µ</div>
          </div>
        </div>

        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏</span>
            <span>{storageStats.storageUsed}%</span>
          </div>
          <Progress value={storageStats.storageUsed} className="h-2" />
        </div>

        <div className="flex gap-2 flex-wrap">
          <Button
            variant={selectedType === 'all' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setSelectedType('all')}
          >
            –í—Å–µ —Ç–∏–ø—ã
          </Button>
          {['interaction', 'emotion', 'learning', 'decision'].map(type => (
            <Button
              key={type}
              variant={selectedType === type ? 'default' : 'outline'}
              size="sm"
              onClick={() => setSelectedType(type)}
              className="capitalize"
            >
              {getTypeIcon(type)} {type === 'interaction' ? '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è' : 
                                type === 'emotion' ? '–≠–º–æ—Ü–∏–∏' :
                                type === 'learning' ? '–û–±—É—á–µ–Ω–∏–µ' : '–†–µ—à–µ–Ω–∏—è'}
            </Button>
          ))}
        </div>

        <div className="space-y-3 max-h-96 overflow-y-auto">
          {filteredMemories.map((memory) => (
            <div key={memory.id} className="border rounded-lg p-4 space-y-2">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Badge className={getTypeColor(memory.type)}>
                    {getTypeIcon(memory.type)} {memory.type}
                  </Badge>
                  <div className="flex items-center gap-1">
                    {Array.from({ length: 5 }).map((_, i) => (
                      <Star
                        key={i}
                        size={12}
                        className={i < memory.importance * 5 ? 'text-yellow-400 fill-current' : 'text-gray-300'}
                      />
                    ))}
                  </div>
                </div>
                <div className="flex items-center gap-2 text-xs text-muted-foreground">
                  <Clock size={12} />
                  {new Date(memory.timestamp).toLocaleString()}
                </div>
              </div>
              
              <div className="text-sm font-medium">{memory.content}</div>
              
              <div className="text-xs text-muted-foreground">
                <strong>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:</strong> {memory.emotionalContext}
              </div>
              
              <div className="flex items-center justify-between text-xs">
                <div className="flex items-center gap-4">
                  <span>–û–±—Ä–∞—â–µ–Ω–∏–π: {memory.recalled}</span>
                  <span>–í–∞–∂–Ω–æ—Å—Ç—å: {Math.round(memory.importance * 100)}%</span>
                </div>
                <div className="flex gap-1">
                  <Button variant="ghost" size="sm">
                    <Search size={12} />
                  </Button>
                  <Button variant="ghost" size="sm">
                    <Archive size={12} />
                  </Button>
                  <Button variant="ghost" size="sm">
                    <Trash2 size={12} />
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>

        <div className="text-center text-xs text-muted-foreground pt-4 border-t">
          <p>–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LSTM —Å–µ—Ç–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏</p>
        </div>
      </CardContent>
    </Card>
  );
};
